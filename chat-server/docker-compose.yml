version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: procv-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: procv_chat
      POSTGRES_USER: procv_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - procv-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U procv_user -d procv_chat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: procv-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_123} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - procv-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chat Server Application
  chat-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: procv-chat-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: procv_chat
      DB_USER: procv_user
      DB_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_123}
      JWT_SECRET: ${JWT_SECRET:-your_super_secure_jwt_secret_key_here}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://same-t08mrgjy1io-latest.netlify.app}
      FILE_UPLOAD_MAX_SIZE: 10485760
      LOG_LEVEL: info
    ports:
      - "8080:8080"
    networks:
      - procv-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - chat_uploads:/app/uploads
      - chat_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: procv-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - procv-network
    depends_on:
      - chat-server

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chat_uploads:
    driver: local
  chat_logs:
    driver: local

networks:
  procv-network:
    driver: bridge
